# C4 Model - Nível 4: Código (Componentes Internos)
# Projeto: RPG.AI-Gemini - Bot Discord com Sistema RAG para D&D 5e

## Visão Geral do Sistema
Este documento descreve os componentes internos do sistema RPG.AI-Gemini, um bot Discord que integra um sistema RAG (Retrieval-Augmented Generation) especializado em Dungeons & Dragons 5e com capacidades de chat conversacional.

## Arquitetura de Componentes

### 1. SISTEMA DE GERENCIAMENTO DE USUÁRIOS (user_id.py)

#### Classe: UserId
**Responsabilidade:** Gerenciar mapeamento bidirecional entre usuários Discord e seus IDs únicos.

**Atributos:**
- `user_id: dict` - Mapeamento usuário → ID
- `id_user: dict` - Mapeamento ID → usuário

**Métodos Principais:**
- `AddUserId(user, id)` - Adiciona novo mapeamento usuário-ID
- `GetId(user)` - Retorna ID de um usuário
- `GetUser(id)` - Retorna usuário de um ID
- `IdExists(id) -> bool` - Verifica se ID existe
- `IdsExist(ids: list)` - Verifica se múltiplos IDs existem

**Instância Global:** `GlobalUserId`

### 2. SISTEMA RAG D&D (rag.py)

#### Classe: DNDRagSystem
**Responsabilidade:** Sistema de Retrieval-Augmented Generation especializado em regras de D&D 5e.

**Dependências Externas:**
- Google Generative AI (Gemini 2.0 Flash Lite)
- Sentence Transformers (all-MiniLM-L6-v2)
- FAISS (índice vetorial)
- LangChain Text Splitters

**Atributos Principais:**
- `gemini_model` - Modelo Gemini para geração de respostas
- `embedding_model` - Modelo para criação de embeddings
- `text_splitter` - Divisor de texto em chunks
- `chunks` - Lista de chunks do documento
- `embeddings` - Matriz de embeddings
- `index` - Índice FAISS para busca vetorial

**Métodos Principais:**

**Inicialização e Processamento:**
- `load_and_process_document(file_path)` - Carrega e processa documento D&D
- `_clean_text(text)` - Limpa e preprocessa texto
- `_create_embeddings()` - Cria embeddings para chunks
- `_create_faiss_index()` - Cria índice FAISS

**Busca e Geração:**
- `search_relevant_chunks(query, top_k)` - Busca chunks relevantes
- `generate_answer(query, top_k)` - Gera resposta usando RAG
- `is_dnd_question(query)` - Detecta perguntas sobre D&D

**Persistência:**
- `save_index(index_path)` - Salva índice para reuso
- `load_index(index_path)` - Carrega índice salvo

**Funções Globais:**
- `initialize_rag_system()` - Inicializa sistema RAG
- `get_rag_system()` - Retorna instância global

### 3. SISTEMA DE CHAT (chat.py)

#### Classe: Chat
**Responsabilidade:** Gerenciar conversas por canal do Discord com histórico.

**Atributos:**
- `preinitialization` - Prompt inicial do sistema
- `chat_text` - Histórico da conversa
- `postinitialization` - Prompt final

**Métodos:**
- `SetName(nome)` - Define nome do bot
- `add_message(message, username)` - Adiciona mensagem ao histórico
- `RecoverHistory(channel)` - Recupera histórico do canal

#### Classe: ChatManager
**Responsabilidade:** Gerenciar múltiplos chats por canal.

**Atributos:**
- `channel_chat: dict` - Mapeamento canal → chat

**Métodos:**
- `add_channel(channel)` - Adiciona novo canal

**Instância Global:** `GlobalManager`

#### Funções de Processamento:
- `convert_mention(mention)` - Converte menções Discord para formato @username
- `parse_message(message)` - Processa mensagens Discord (parcialmente implementado)

### 4. BOT DISCORD PRINCIPAL (discord_test.py)

#### Configuração e Inicialização:
- Configuração de tokens (Google API, Discord Bot)
- Setup do modelo Gemini 2.0 Flash Lite
- Configuração de intents do Discord

#### Funções Principais:

**Processamento de Mensagens:**
- `get_response(model, chat, prompt, username)` - Gera resposta integrando RAG e chat
- `respond_message(chat, message, user_message, username)` - Responde a mensagens
- `split_text_n(text, sep, n)` - Divide texto longo para limites do Discord

**Eventos Discord:**
- `on_ready()` - Inicialização do bot e sistema RAG
- `on_message(message)` - Processamento de mensagens recebidas

### 5. SISTEMA DE TRADUÇÃO (en_terms.py)

#### Dicionário: dnd_dictionary_pt_en
**Responsabilidade:** Mapeamento extenso de termos D&D português-inglês.

**Categorias de Termos:**
- Raças e Linhagens (Dwarf, Elf, Human, etc.)
- Classes (Barbarian, Wizard, Cleric, etc.)
- Atributos (Strength, Dexterity, etc.)
- Perícias (Acrobatics, Arcana, etc.)
- Magias e Habilidades
- Equipamentos e Itens
- Termos de Jogo

### 6. ARQUIVOS DE DADOS E ÍNDICES

#### dnd.txt
- Documento fonte com regras completas de D&D 5e
- Tamanho: ~1.4MB
- Codificação: UTF-8/Latin-1

#### dnd_index.pkl
- Índice serializado com chunks e embeddings
- Tamanho: ~6.7MB
- Formato: Pickle

#### dnd_index.faiss
- Índice FAISS para busca vetorial
- Tamanho: ~5.3MB
- Otimizado para cosine similarity

## Fluxo de Dados

### 1. Inicialização do Sistema
```
1. Carregamento de variáveis de ambiente
2. Configuração do modelo Gemini
3. Inicialização do sistema RAG
4. Carregamento de índices existentes ou criação de novos
5. Configuração do bot Discord
```

### 2. Processamento de Mensagem
```
1. Recebimento de mensagem Discord
2. Verificação se bot foi mencionado
3. Adição ao histórico do chat
4. Detecção se é pergunta sobre D&D
5. Se D&D: uso do sistema RAG
6. Se não D&D: uso do chat conversacional
7. Geração de resposta
8. Divisão se necessário (limite Discord)
9. Envio da resposta
```

### 3. Sistema RAG
```
1. Análise da pergunta
2. Busca de chunks relevantes via FAISS
3. Tradução de termos se necessário
4. Construção de contexto
5. Geração de resposta com Gemini
6. Retorno da resposta formatada
```

## Dependências Externas

### APIs e Serviços:
- **Google Generative AI** - Modelo de linguagem
- **Discord API** - Comunicação com Discord

### Bibliotecas Python:
- `google-generativeai` - Integração com Gemini
- `sentence-transformers` - Embeddings
- `faiss-cpu` - Índice vetorial
- `numpy` - Operações numéricas
- `python-dotenv` - Variáveis de ambiente
- `langchain-text-splitters` - Divisão de texto
- `discord` - Cliente Discord

## Considerações de Performance

### Otimizações Implementadas:
- Índices pré-processados para evitar reprocessamento
- Batch processing para embeddings
- Chunks otimizados (500 chars, overlap 100)
- Normalização L2 para cosine similarity
- Cache de sistema RAG global

### Limitações:
- Tamanho de resposta Discord (2000 chars)
- Latência de APIs externas
- Memória para índices FAISS

## Pontos de Extensão

### Áreas para Melhoria:
1. Sistema de cache mais robusto
2. Suporte a múltiplos idiomas
3. Integração com APIs de D&D Beyond
4. Sistema de feedback e aprendizado
5. Análise de sentimento das respostas
6. Métricas de uso e performance

### Arquitetura Modular:
O sistema foi projetado com separação clara de responsabilidades, permitindo:
- Substituição do modelo de linguagem
- Adição de novos sistemas RAG
- Integração com outras plataformas
- Extensão do dicionário de termos 